// v. 0.2.4

type UserRank = variant {
  Padawan; 
  DataDetective; 
  MasterSleuth; 
  GrandMasterSleuth; 
  Admin;
};
type UserData = record { user_account: text; user_name: text; user_tokens: nat32; user_rank: UserRank}; 
type HolderData = record { nat32; text; }; 
type MemoryStats = record {memory: nat64; heap_memory: nat64};
type LogEntry = record {timestamp: text; text: text};
type AddressEntry = record {text; text; text}; // owner, saved account, saved name; 
type PublicAddressEntry = record {text; text}; // saved account, saved name;

service : {
    "get_user_data": (text) -> (opt UserData) query;
    "add_authorised": (text) -> (text);
    "remove_authorised": (text) -> (text);
    "getauthorised": () -> (vec text) query;
    "add_new_user": (text) -> (bool);
    "update_username": (text, text) -> (bool);
    "update_user_tokens": (text, nat32) -> (bool);
    "get_single_account": (text, nat32) -> (text) query;
    "get_multiple_account": (text, nat32, nat32) -> (vec text) query;
    //"read_genesis_holders": () -> (vec HolderData) query;
    //"stop_all_timers" : () -> (text);
    //"check_and_start_genesis_timer" : (nat64) -> (text);
    "is_genesis_holder": (text) -> (bool);
    "get_cycles_balance": () -> (nat64) query;
    "get_memory_stats": () -> (MemoryStats) query;
    "read_logs": () -> (opt vec LogEntry) query;
    "get_user_named_accounts": (text, vec text) -> (opt vec PublicAddressEntry) query;   // owner ac, vec acs -> (ac, name)
    "add_user_named_accounts": (text, text, text) -> (text);   // owner a/c, save a/c, save name;
    "remove_user_named_account": (text, text) -> (text); // owner a/c, save a/c;
    "get_all_user_named_accounts": (text) -> (opt vec PublicAddressEntry) query;
    "get_public_named_accounts": (vec text) -> (opt vec PublicAddressEntry) query; 
    "add_public_named_accounts": (text, text) -> (text); // save a/c, save name;
    "remove_public_named_account": (text) -> (text); // save a/c;
}
